<?xml version="1.0" encoding="UTF-8" ?>
<schema name="spectrum" version="1.6">

 <fields>
   <field name="id" type="string_punct_stop" indexed="true" stored="true" required="true" multiValued="false" />

   <!-- Uncommenting the following will create a "timestamp" field using
        a default value of "NOW" to indicate when each document was indexed.

        libserver7 directory: /usr/local/solr/clio-hydra/conf
        log files: /usr/local/solr_tomcat/logs/catalina.out
     -->
   <field name="timestamp" type="date" indexed="true" stored="true" default="NOW" multiValued="false"/>

   <field name="format" type="string" indexed="true" stored="true" multiValued="true"/>

   <!-- these display fields are NOT multi-valued -->
   <field name="marc_display" type="string" indexed="false" stored="true" multiValued="false"/>

   <!-- catchall field, built with getAllSearchableFields(),
        appended to via copyField further on in this schema  -->
   <field name="text" type="text_general" indexed="true" stored="false" multiValued="true"/>
   <field name="text_copy_cjk" type="text_cjk" indexed="true" stored="false" multiValued="true"/>

   <field name="title_first_facet" type="string" indexed="true" stored="true" multiValued="true"/>
   <field name="language_facet" type="string" indexed="true" stored="true" multiValued="true" />
   <field name="subject_topic_facet" type="string" indexed="true" stored="true" multiValued="true" />
   <field name="subject_geo_facet" type="string" indexed="true" stored="true" multiValued="true" />
   <field name="subject_local_facet" type="string" indexed="true" stored="true" multiValued="true" />

   <field name="pub_date_sort" type="tint" indexed="true" stored="true" multiValued="false"/>

   <!-- enables leading wildcard queries (even though field is unused!) -->
   <field name="text_rev" type="text_general_rev" indexed="true" stored="false" multiValued="true"/>

   <!-- used internally by Solr -->
   <field name="_version_" type="long" indexed="true" stored="true"/>

   <field name="cjk" type="text_cjk" indexed="true" stored="true" multiValued="false"/>
   <dynamicField name="*_cjk" type="text_cjk"   indexed="true"  stored="true" multiValued="true"/>
   <dynamicField name="*_hl" type="text_general" indexed="true" stored="true" multiValued="true"/>


   <dynamicField name="*_i"  type="int"    indexed="true"  stored="true"/>
   <dynamicField name="*_is" type="int"    indexed="true"  stored="true"  multiValued="true"/>
   <dynamicField name="*_s"  type="string"  indexed="true"  stored="true" />
   <dynamicField name="*_ss" type="string"  indexed="true"  stored="true" multiValued="true"/>
   <dynamicField name="*_l"  type="long"   indexed="true"  stored="true"/>
   <dynamicField name="*_ls" type="long"   indexed="true"  stored="true"  multiValued="true"/>
   <dynamicField name="*_t"  type="text_general"    indexed="true"  stored="true"/>
<!-- marquis, 3/20/13 - stop storing _txt fields, see if anything breaks...
   <dynamicField name="*_txt" type="text_general"   indexed="true"  stored="true" multiValued="true"/>
-->
   <dynamicField name="*_txt" type="text_general"   indexed="true"  stored="false" multiValued="true"/>
   <dynamicField name="*_f"  type="float"  indexed="true"  stored="true"/>
   <dynamicField name="*_fs" type="float"  indexed="true"  stored="true"  multiValued="true"/>
   <dynamicField name="*_d"  type="double" indexed="true"  stored="true"/>
   <dynamicField name="*_ds" type="double" indexed="true"  stored="true"  multiValued="true"/>

   <dynamicField name="*_dt"  type="date"    indexed="true"  stored="true"/>
   <dynamicField name="*_dts" type="date"    indexed="true"  stored="true" multiValued="true"/>

   <!-- some trie-coded dynamic fields for faster range queries -->
   <dynamicField name="*_ti" type="tint"    indexed="true"  stored="true"/>
   <dynamicField name="*_tl" type="tlong"   indexed="true"  stored="true"/>
   <dynamicField name="*_tf" type="tfloat"  indexed="true"  stored="true"/>
   <dynamicField name="*_td" type="tdouble" indexed="true"  stored="true"/>
   <dynamicField name="*_tdt" type="tdate"  indexed="true"  stored="true"/>

   <dynamicField name="attr_*" type="text_general" indexed="true" stored="true" multiValued="true"/>

   <dynamicField name="*_display" type="string" indexed="false" stored="true" multiValued="true" />
   <dynamicField name="*_facet" type="string" indexed="true" stored="false" multiValued="true" />
   <dynamicField name="*_sort" type="alphaOnlySort" indexed="true" stored="false" multiValued="false" />
   <dynamicField name="*_unstem_search" type="text_general_unstem" indexed="true" stored="false" multiValued="true" />
   <dynamicField name="*_starts_with" type="text_starts_with" indexed="true" stored="false" multiValued="true" />
   <dynamicField name="*_tim" type="tint" indexed="true"  stored="true" multiValued="true"/>
   <dynamicField name="*_left_edge" type="text_left_edge" indexed="true" stored="false" multiValued="true" />


   <!-- <dynamicField name="*spell" type="text_general" indexed="true" stored="false" multiValued="true" /> -->

 </fields>


 <!-- Field to use to determine and enforce document uniqueness.
      Unless this field is marked with required="false", it will be a required field
   -->
 <uniqueKey>id</uniqueKey>

   <!-- build up fat "text" field, to reduce clauses in edismax search  -->
   <copyField source="id" dest="text"/>
   <copyField source="isbn_txt" dest="text"/>
   <copyField source="issn_txt" dest="text"/>
   <copyField source="lccn_txt" dest="text"/>
   <copyField source="oclc_txt" dest="text"/>
   <copyField source="location_call_number_txt" dest="text"/>


   <!-- unstemmed fields -->
   <copyField source="title_txt" dest="title_unstem_search"/>
   <copyField source="subtitle_txt" dest="subtitle_unstem_search"/>
   <copyField source="title_addl_txt" dest="title_addl_unstem_search"/>
   <copyField source="title_series_txt" dest="title_series_unstem_search"/>
   <copyField source="author_txt" dest="author_unstem_search"/>
   <copyField source="author_addl_txt" dest="author_addl_unstem_search"/>
   <copyField source="subject_txt" dest="subject_unstem_search"/>
   <copyField source="subject_local_txt" dest="subject_unstem_search"/>

   <!-- build up the multi-value title-starts-with -->
   <copyField source="title_txt" dest="title_starts_with"/>
   <copyField source="subtitle_txt" dest="title_starts_with"/>
   <copyField source="title_addl_txt" dest="title_starts_with"/>
   <copyField source="title_series_txt" dest="title_starts_with"/>
   <copyField source="title_sort" dest="title_starts_with"/>

   <!-- sort fields -->
   <copyField source="pub_date_txt" dest="pub_date_sort"/>

   <!-- CJK fields -->

   <copyField source="text" dest="text_copy_cjk"/>
   <copyField source="title_txt" dest="title_txt_cjk"/>
   <copyField source="subtitle_txt" dest="subtitle_txt_cjk"/>
   <copyField source="title_series_txt" dest="title_series_txt_cjk"/>
   <copyField source="title_addl_txt" dest="title_addl_txt_cjk"/>
   <copyField source="author_txt" dest="author_txt_cjk"/>
   <copyField source="author_addl_txt" dest="author_addl_txt_cjk"/>
   <copyField source="subject_txt" dest="subject_txt_cjk"/>
   <copyField source="pub_place_txt" dest="pub_place_txt_cjk"/>
   <copyField source="pub_name_txt" dest="pub_name_txt_cjk"/>

   <!-- Call number edge -->
   <copyField source="call_number_txt" dest="call_number_left_edge"/>


  <types>

    <!-- The StrField type is not analyzed, but indexed/stored verbatim. -->
    <fieldType name="string" class="solr.StrField" sortMissingLast="true" />

    <!--
      Default numeric field types. For faster range queries, consider the tint/tfloat/tlong/tdouble types.
    -->
    <fieldType name="int" class="solr.TrieIntField" precisionStep="0" positionIncrementGap="0"/>
    <fieldType name="float" class="solr.TrieFloatField" precisionStep="0" positionIncrementGap="0"/>
    <fieldType name="long" class="solr.TrieLongField" precisionStep="0" positionIncrementGap="0"/>
    <fieldType name="double" class="solr.TrieDoubleField" precisionStep="0" positionIncrementGap="0"/>

    <!--
     Numeric field types that index each value at various levels of precision
     to accelerate range queries when the number of values between the range
     endpoints is large. See the javadoc for NumericRangeQuery for internal
     implementation details.

     Smaller precisionStep values (specified in bits) will lead to more tokens
     indexed per value, slightly larger index size, and faster range queries.
     A precisionStep of 0 disables indexing at different precision levels.
    -->
    <!-- marquis, 9/13 - add sortMissingLast on tint, so pub_date_sort "hides" invalid date values -->
    <fieldType name="tint" class="solr.TrieIntField" precisionStep="8" positionIncrementGap="0" sortMissingLast="true" />
    <fieldType name="tfloat" class="solr.TrieFloatField" precisionStep="8" positionIncrementGap="0"/>
    <fieldType name="tlong" class="solr.TrieLongField" precisionStep="8" positionIncrementGap="0"/>
    <fieldType name="tdouble" class="solr.TrieDoubleField" precisionStep="8" positionIncrementGap="0"/>

    <!-- The format for this date field is of the form 1995-12-31T23:59:59Z, and
         is a more restricted form of the canonical representation of dateTime
         http://www.w3.org/TR/xmlschema-2/#dateTime
         The trailing "Z" designates UTC time and is mandatory.
         Optional fractional seconds are allowed: 1995-12-31T23:59:59.999Z
         All other components are mandatory.

         Expressions can also be used to denote calculations that should be
         performed relative to "NOW" to determine the value, ie...

               NOW/HOUR
                  ... Round to the start of the current hour
               NOW-1DAY
                  ... Exactly 1 day prior to now
               NOW/DAY+6MONTHS+3DAYS
                  ... 6 months and 3 days in the future from the start of
                      the current day

         Consult the DateField javadocs for more information.

         Note: For faster range queries, consider the tdate type
      -->
    <fieldType name="date" class="solr.TrieDateField" precisionStep="0" positionIncrementGap="0"/>

    <!-- A Trie based date field for faster date range queries and date faceting. -->
    <fieldType name="tdate" class="solr.TrieDateField" precisionStep="6" positionIncrementGap="0"/>


    <!--Binary data type. The data should be sent/retrieved in as Base64 encoded Strings -->
    <fieldtype name="binary" class="solr.BinaryField"/>

    <!-- Stemmed, for flexible english-language matching (a.k.a., "text_stem") -->
    <fieldType name="text_general" class="solr.TextField" positionIncrementGap="100">
      <analyzer type="index">
        <tokenizer class="solr.WhitespaceTokenizerFactory"/>
        <filter class="org.apache.lucene.analysis.icu.ICUFoldingFilterFactory" />
        <filter class="solr.StopFilterFactory"
                ignoreCase="true"
                words="stopwords.txt"
                 />
        <filter class="solr.WordDelimiterFilterFactory"
                splitOnCaseChange="1" generateWordParts="1" generateNumberParts="1"
                catenateWords="1" catenateNumbers="1" catenateAll="1" />
        <filter class="solr.SynonymFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="true"/>
        <!-- <filter class="solr.StemmerOverrideFilterFactory" dictionary="stemdict.txt" />-->
        <filter class="solr.SnowballPorterFilterFactory" language="English" protected="protwords.txt"/>
        <filter class="solr.RemoveDuplicatesTokenFilterFactory"/>
      </analyzer>
      <analyzer type="query">
        <tokenizer class="solr.WhitespaceTokenizerFactory"/>
        <filter class="org.apache.lucene.analysis.icu.ICUFoldingFilterFactory" />
        <filter class="solr.StopFilterFactory"
                ignoreCase="true"
                words="stopwords.txt"
        />
        <filter class="solr.WordDelimiterFilterFactory"
                splitOnCaseChange="1" generateWordParts="1" generateNumberParts="1"
                catenateWords="0" catenateNumbers="0" catenateAll="0" />
        <filter class="solr.SynonymFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="true"/>
        <!-- <filter class="solr.StemmerOverrideFilterFactory" dictionary="stemdict.txt" /> -->
        <filter class="solr.SnowballPorterFilterFactory" language="English" protected="protwords.txt"/>
        <filter class="solr.RemoveDuplicatesTokenFilterFactory"/>
      </analyzer>
    </fieldType>


    <!-- Analyzed Text, no Stemming or Synonyms (a.k.a., "text_exact") -->
    <fieldtype name="text_general_unstem" class="solr.TextField" positionIncrementGap="100" autoGeneratePhraseQueries="true">
      <analyzer type="index">
        <tokenizer class="solr.WhitespaceTokenizerFactory" />
        <filter class="solr.ICUFoldingFilterFactory"/>  <!-- NFKC, case folding, diacritics removed -->
        <filter class="solr.WordDelimiterFilterFactory"
          splitOnCaseChange="1" generateWordParts="1" catenateWords="1"
          splitOnNumerics="0" generateNumberParts="1" catenateNumbers="1"
          catenateAll="1" preserveOriginal="0" stemEnglishPossessive="0" />
        <filter class="solr.RemoveDuplicatesTokenFilterFactory" />
      </analyzer>
      <analyzer type="query">
        <tokenizer class="solr.WhitespaceTokenizerFactory" />
        <filter class="solr.ICUFoldingFilterFactory"/>  <!-- NFKC, case folding, diacritics removed -->
        <filter class="solr.WordDelimiterFilterFactory"
          splitOnCaseChange="1" generateWordParts="1" catenateWords="1"
          splitOnNumerics="0" generateNumberParts="1" catenateNumbers="1"
          catenateAll="0" preserveOriginal="0" stemEnglishPossessive="0" />
        <filter class="solr.RemoveDuplicatesTokenFilterFactory" />
      </analyzer>
    </fieldtype>

    <!-- Used by elevate component when matching search terms -->
    <fieldtype name="elevate_field" class="solr.TextField" positionIncrementGap="100" autoGeneratePhraseQueries="true">
      <analyzer>
        <tokenizer class="solr.WhitespaceTokenizerFactory" />
        <filter class="solr.TrimFilterFactory" />
        <filter class="solr.ICUFoldingFilterFactory"/>  <!-- NFKC, case folding, diacritics removed -->
        <filter class="solr.WordDelimiterFilterFactory"
                splitOnCaseChange="1" generateWordParts="1" catenateWords="1"
                splitOnNumerics="0" generateNumberParts="1" catenateNumbers="1"
                catenateAll="0" preserveOriginal="0" stemEnglishPossessive="0" />
        <filter class="solr.RemoveDuplicatesTokenFilterFactory" />
        <filter class="solr.StopFilterFactory" words="elevate-stopwords.txt"/>
        <filter class="solr.SynonymFilterFactory" synonyms="elevate-synonyms.txt" ignoreCase="true" expand="true"/>
      </analyzer>
    </fieldtype>

    <!-- Support left-anchored ("starts-with") searching, NEXT-140, NEXT-234
        see:  http://robotlibrarian.billdueber.com/boosting-on-exactish-anchored-phrase-matching-in-solr-sst-4/
      -->
    <fieldtype name="text_starts_with" class="solr.TextField" positionIncrementGap="100" autoGeneratePhraseQueries="true">
      <analyzer>
	    <charFilter class="solr.PatternReplaceCharFilterFactory"
	      pattern="^(.*)$" replacement="AAAA $1" />
        <tokenizer class="solr.ICUTokenizerFactory"/>
        <!-- <tokenizer class="solr.WhitespaceTokenizerFactory" />  -->
        <filter class="solr.CJKWidthFilterFactory"/>
        <filter class="edu.stanford.lucene.analysis.CJKFoldingFilterFactory"/>
        <filter class="solr.ICUTransformFilterFactory" id="Traditional-Simplified"/>
        <filter class="solr.ICUTransformFilterFactory" id="Katakana-Hiragana"/>
        <filter class="solr.ICUFoldingFilterFactory"/>  <!-- NFKC, case folding, diacritics removed -->
        <filter class="solr.CJKBigramFilterFactory" han="true" hiragana="true" katakana="true" hangul="true" outputUnigrams="true" />
        <filter class="solr.WordDelimiterGraphFilterFactory"
          splitOnCaseChange="1" generateWordParts="1" catenateWords="1"
          splitOnNumerics="0" generateNumberParts="1" catenateNumbers="1"
          catenateAll="0" preserveOriginal="0" stemEnglishPossessive="0" />
      </analyzer>
    </fieldtype>

    <!-- Support "sounds-like" matching -->
    <fieldtype name="text_phonetic" class="solr.TextField" positionIncrementGap="100" autoGeneratePhraseQueries="true">
      <analyzer>
        <tokenizer class="solr.WhitespaceTokenizerFactory" />
        <filter class="solr.ICUFoldingFilterFactory"/>  <!-- NFKC, case folding, diacritics removed -->
        <filter class="solr.WordDelimiterFilterFactory"
          splitOnCaseChange="1" generateWordParts="1" catenateWords="1"
          splitOnNumerics="0" generateNumberParts="1" catenateNumbers="1"
          catenateAll="0" preserveOriginal="0" stemEnglishPossessive="0" />
        <filter class="solr.DoubleMetaphoneFilterFactory" inject="false"/>
      </analyzer>
    </fieldtype>

    <!-- Just like text_general except it reverses the characters of
   each token, to enable more efficient leading wildcard queries. -->
    <fieldType name="text_general_rev" class="solr.TextField" positionIncrementGap="100">
      <analyzer type="index">
        <tokenizer class="solr.StandardTokenizerFactory"/>
        <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt"/>
        <filter class="solr.LowerCaseFilterFactory"/>
        <filter class="solr.ReversedWildcardFilterFactory" withOriginal="true"
           maxPosAsterisk="3" maxPosQuestion="2" maxFractionAsterisk="0.33"/>
      </analyzer>
      <analyzer type="query">
        <tokenizer class="solr.StandardTokenizerFactory"/>
        <filter class="solr.SynonymFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="true"/>
        <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt"/>
        <filter class="solr.LowerCaseFilterFactory"/>
      </analyzer>
    </fieldType>

    <!-- This is an example of using the KeywordTokenizer along
         With various TokenFilterFactories to produce a sortable field
         that does not include some properties of the source text
      -->
    <fieldType name="alphaOnlySort" class="solr.TextField" sortMissingLast="true" omitNorms="true">
      <analyzer>
        <!-- KeywordTokenizer does no actual tokenizing, so the entire
             input string is preserved as a single token
          -->
        <tokenizer class="solr.KeywordTokenizerFactory"/>
        <!-- The LowerCase TokenFilter does what you expect, which can be
             when you want your sorting to be case insensitive
          -->
        <filter class="solr.LowerCaseFilterFactory" />
        <!-- The TrimFilter removes any leading or trailing whitespace -->
        <filter class="solr.TrimFilterFactory" />
        <!-- The PatternReplaceFilter gives you the flexibility to use
             Java Regular expression to replace any sequence of characters
             matching a pattern with an arbitrary replacement string,
             which may include back references to portions of the original
             string matched by the pattern.

             See the Java Regular Expression documentation for more
             information on pattern and replacement string syntax.

             http://java.sun.com/j2se/1.6.0/docs/api/java/util/regex/package-summary.html
          -->
        <filter class="solr.PatternReplaceFilterFactory"
                pattern="([^a-z])" replacement="" replace="all"
        />
      </analyzer>
    </fieldType>


   <!-- string_punct_stop copied from Stanford Searchworks -->
   <!-- single token with punctuation terms removed so dismax doesn't look for punctuation terms in these fields -->
   <!-- On client side, Lucene query parser breaks things up by whitespace *before* field analysis for dismax -->
   <!-- so punctuation terms (& : ;) are stopwords to allow results from other fields when these chars are surrounded by spaces in query -->
   <!--  do not lowercase -->
   <fieldType name="string_punct_stop" class="solr.TextField" omitNorms="true">
     <analyzer type="index">
       <tokenizer class="solr.KeywordTokenizerFactory" />
       <!-- <filter class="solr.ICUNormalizer2FilterFactory" name="nfkc" mode="compose" /> -->
     </analyzer>
     <analyzer type="query">
       <tokenizer class="solr.KeywordTokenizerFactory" />
       <!-- <filter class="solr.ICUNormalizer2FilterFactory" name="nfkc" mode="compose" /> -->
       <!-- removing punctuation for Lucene query parser issues -->
       <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt"/>
     </analyzer>
   </fieldType>

    <!--
<fieldType name="text_cjk" class="solr.TextField" positionIncrementGap="10000" autoGeneratePhraseQueries="false">
 <analyzer>
  <tokenizer class="solr.ICUTokenizerFactory" />
  <filter class="solr.CJKWidthFilterFactory"/>
  <filter class="solr.ICUTransformFilterFactory" id="Traditional-Simplified"/>
  <filter class="solr.ICUTransformFilterFactory" id="Katakana-Hiragana"/>
  <filter class="solr.ICUFoldingFilterFactory"/>
  <filter class="solr.CJKBigramFilterFactory" han="true" hiragana="true" katakana="true" hangul="true" outputUnigrams="true" />
</analyzer>
</fieldType> -->

    <fieldType name="text_cjki_old" class="solr.TextField" positionIncrementGap="10000" autoGeneratePhraseQueries="false">
  <analyzer>
    <tokenizer class="solr.ICUTokenizerFactory" />
    <filter class="solr.CJKWidthFilterFactory"/>
    <filter class="edu.stanford.lucene.analysis.CJKFoldingFilterFactory"/>
    <filter class="solr.ICUTransformFilterFactory" id="Traditional-Simplified"/>
    <filter class="solr.ICUTransformFilterFactory" id="Katakana-Hiragana"/>
    <filter class="solr.ICUFoldingFilterFactory"/>
    <filter class="solr.CJKBigramFilterFactory" han="true" hiragana="true" katakana="true" hangul="true" outputUnigrams="true" />
  </analyzer>
</fieldType>


<fieldType name="text_cjk" class="solr.TextField" positionIncrementGap="10000" autoGeneratePhraseQueries="false">
  <analyzer type="index">
      <tokenizer class="solr.ICUTokenizerFactory" />
      <filter class="solr.CJKWidthFilterFactory"/>
      <filter class="edu.stanford.lucene.analysis.CJKFoldingFilterFactory"/>
      <filter class="solr.ICUTransformFilterFactory" id="Traditional-Simplified"/>
      <filter class="solr.ICUTransformFilterFactory" id="Katakana-Hiragana"/>
      <filter class="solr.ICUFoldingFilterFactory"/>
      <filter class="solr.CJKBigramFilterFactory" han="true" hiragana="true" katakana="true" hangul="true" outputUnigrams="true" />
  </analyzer>
  <analyzer type="query">
    <tokenizer class="solr.ICUTokenizerFactory"/>
    <filter class="solr.CJKWidthFilterFactory"/>
    <filter class="edu.stanford.lucene.analysis.CJKFoldingFilterFactory"/>
    <filter class="solr.ICUTransformFilterFactory" id="Traditional-Simplified"/>
    <filter class="solr.ICUTransformFilterFactory" id="Katakana-Hiragana"/>
    <filter class="solr.ICUFoldingFilterFactory"/>
    <filter class="solr.CJKBigramFilterFactory" han="true" hiragana="true" katakana="true" hangul="true"
            outputUnigrams="false"/>
  </analyzer>
</fieldType>


   <!--  text left edge field type, used for callnumber edge index/search -->
   <fieldtype name="text_left_edge" class="solr.TextField" positionIncrementGap="100" autoGeneratePhraseQueries="true">
     <analyzer type="index">
       <tokenizer class="solr.EdgeNGramTokenizerFactory" minGramSize="1" maxGramSize="50"/>
       <filter class="solr.TrimFilterFactory"/>
       <filter class="solr.LowerCaseFilterFactory"/>
     </analyzer>
     <analyzer type="query">
       <tokenizer class="solr.KeywordTokenizerFactory"/>
       <filter class="solr.TrimFilterFactory"/>
       <filter class="solr.LowerCaseFilterFactory"/>
     </analyzer>
   </fieldtype>

 </types>

</schema>
